<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--mapper:映射器
    1.namespace="": 本文件用来管理namespace所指接口，主要实现接口中声明的方法。
    2.select: 实现一个查询操作。
    3.id: namespace接口中的方法名。
    4.resulttype: 返回的结果类型。如果没有不需要写。
    5.parameterType: 该方法输入的参数类型。
    6.insert: 表示添加。
    7.useGeneratedKeys:返回添加对象的主键
    8.keyProperty:返回值SET属性
    -->
<mapper namespace="cn.kevin.sms.mapper.StudentMapper">
    <resultMap id="studentResultMap" type="cn.kevin.sms.entity.Student">
        <id column="stuId" property="stuId"/>
        <id column="stuAge" property="stuAge"/>
        <id column="stuBirthday" property="stuBirthday"/>
        <id column="stuEmail" property="stuEmail"/>
        <id column="stuGender" property="stuGender"/>
        <id column="stuName" property="stuName"/>
<!--        <collection column="subScore" property="scores" ofType="cn.kevin.sms.entity.Score"-->
<!--                    select="cn.kevin.sms.mapper.ScoreMapper.getByStudentId"/>-->
    </resultMap>
    <insert id="insert" parameterType="cn.kevin.sms.entity.Student">
        INSERT INTO Student (stuId, stuAge, stuBirthday, stuEmail, stuGender, stuName)
        VALUE (#{stuId}, #{stuAge}, #{stuBirthday}, #{stuEmail}, #{stuGender}, #{stuName})
    </insert>
    <delete id="delete" parameterType="Integer">
        DELETE
        FROM Student
        WHERE stuId = #{stuId}
    </delete>
    <update id="update" parameterType="cn.kevin.sms.entity.Student">
        UPDATE Student
        SET stuAge      = #{stuAge},
            stuBirthday = #{stuBirthday},
            stuEmail    = #{stuEmail},
            stuGender   = #{stuGender},
            stuName     = #{stuName}
        WHERE stuId = #{stuId}
    </update>
    <select id="select" parameterType="Integer" resultType="cn.kevin.sms.entity.Student">
        SELECT *
        FROM Student
        WHERE stuId = #{stuId}
    </select>
    <select id="selectAll" resultType="cn.kevin.sms.entity.Student">
        SELECT *
        FROM Student
    </select>
    <select id="selectByAllInfo" parameterType="cn.kevin.sms.entity.Student" resultType="cn.kevin.sms.entity.Student">
        SELECT *
        FROM Student
        WHERE stuId = #{stuId}
           OR stuAge = #{stuAge}
           OR stuEmail = #{stuEmail}
           OR stuGender = #{stuGender}
           OR stuName = #{stuName}
    </select>
    <select id="selectSimilarName" parameterType="String" resultType="cn.kevin.sms.entity.Student">
        SELECT *
        FROM Student
        WHERE stuName LIKE '%${value}%'
    </select>
</mapper>
